.TH "ACLPOLICY" "" "December 20, 2013" "" ""
.SH Overview
.PP
This document describes the YAML format for ACL Policy definition files.
.PP
Multiple aclpolicy files can be stored in the same directory, helping
the management of each set of rules.
This reduces the complexity of each file.
The default path is
.IP \[bu] 2
RPM install: \f[C]/etc/rundeck\f[]
.IP \[bu] 2
Launcher install: \f[C]$RDECK_BASE/etc\f[]
.PP
Policy files are parsed using YAML and while the structure is rigid,
additional information can be added and safely ignored.
So creating arbitrary elements for documentation or organizational
purposes is gracefully parsed.
.PD 0
.P
.PD
The resulting file must be a valid yaml file.
.PP
For more information about the exact resources and actions you need to
authorize for the Rundeck application, see the Administration Guide \-
Authorization (../administration/access-control-policy.html#rundeck-resource-authorizations).
.SS Authorizing a certain action on a resource
.PP
The aclpolicy describes actions that are allowed or denied on certain
resources.
.PP
The method for determining whether a user has access to perform such an
action happens essentially in this way:
.IP "1." 3
Look for policies matching the username or group for the user
.IP "2." 3
Look for a context matching the environment of the given resource
.RS 4
.IP \[bu] 2
either a specific project by name
.IP \[bu] 2
or the application level
.RE
.IP "3." 3
Look for a Type rule for the type of resource
.RS 4
.IP \[bu] 2
either a specific resource by its named type
.IP \[bu] 2
or the generic "resource"
.RE
.IP "4." 3
Iterate through the rules for the type
.RS 4
.IP \[bu] 2
if a rule matches, and allows the action, mark it and continue.
.IP \[bu] 2
if a rule matches and denies the action, return DENIED, and stop
.RE
.IP "5." 3
If it was DENIED, return DENIED.
If it was marked, return ALLOWED.
Otherwise if no rules matched, return REJECTED.
.PP
Thus to allow an action, there has to be a matching rule that allows it,
and no matching rule that denies it.
.SS Changes
.PP
The YAML format has changed since version 1.2 to address several issues:
.IP "1." 3
Acccess control on resources other than Jobs can now be declared
.IP "2." 3
Project level access control is now supported
.IP "3." 3
"Deny" rules can now be declared
.IP "4." 3
Application level access control is also supported, replacing the Role
mapping
.PP
The Rundeck server no longer uses role\-mapping and instead defers to
the aclpolicy for all authorizations.
.SS In version 1.5
.IP \[bu] 2
\f[C]by\f[] clause \f[C]username:\f[] and \f[C]group:\f[] now support
regular expression matching
.IP \[bu] 2
legacy XML support has been removed
.IP \[bu] 2
legacy \f[C]rules:\f[] section in yaml support has been removed
.SS Upgrading
.PP
Note: The XML format from Rundeck 1.3 and earlier is no longer
supported.
As well, the YAML format from 1.2 is now only partially supported.
.PP
If you are upgrading from Rundeck 1.3 or earlier, you will have to
modify your *.aclpolicy files.
.PP
If you have XML formatted files, you will need to remove and replace
them with a YAML document in the format described below.
A full, admin\-level ACL is described at the end of this document.
.PP
If you have YAML formatted files, you will also need to upgrade them
slightly.
.SS The aclpolicy markup by example
.PP
An example policy document.
.IP
.nf
\f[C]
description:\ Yaml\ Policy\ 1
context:\ #\ declares\ the\ context\ of\ the\ ACL
\ \ project:\ \[aq].*\[aq]\ #\ applies\ to\ projects\ matching\ a\ regex.
for:
\ \ resource:
\ \ \ \ \ \-\ equals:
\ \ \ \ \ \ \ \ kind:\ job
\ \ \ \ \ \ \ allow:\ \[aq]*\[aq]
\ \ job:
\ \ \ \ \ \-\ allow:\ \[aq]*\[aq]
\ \ \ \ \ \-\ match:
\ \ \ \ \ \ \ \ \ group:\ \[aq]group1/.*\[aq]
\ \ \ \ \ \ \ deny:\ \[aq]*\[aq]

by:
\ \ \ \ username:\ \[aq]yml_usr_1\[aq]
\ \ \ \ group:\ [\[aq]yml_group_1\[aq],\[aq]group2\[aq]]
\f[]
.fi
.PP
An .aclpolicy supports multiple policy definitions in the form of YAML
documents usign the \f[C]\-\-\-\f[] separator.
There are four elements that make a policy definition:
\f[C]decription\f[], \f[C]context\f[], \f[C]for\f[], \f[C]by\f[].
.PP
It\[aq]s recommended that this description be short and descriptive as
it appears in the log output.
.SS \f[C]context\f[]
.PP
The \f[C]context\f[] section declares the scope of the ensuing policy
description.
.PP
The \f[C]context\f[] can contain one of two things:
.IP "1." 3
\f[C]project\f[]
.IP "2." 3
\f[C]application\f[]
.PP
Declaring a \f[C]project:\f[] declares the name of the project(s) for
which the policy applies.
Its value is a String, and can be a regular expression, for which the
project name must match to apply.
.PP
If you declare an \f[C]application\f[] section, its only supported value
is \f[C]rundeck\f[], as: context: application: \[aq]rundeck\[aq]
.PP
This declares that the policy document describes access control at the
application level, rather than for at a project level.
You can then declare access control on actions such as creating
Projects.
.PP
Note that to provide a full "admin" level access control for a user or
group, then two policies must be defined, for application level as well
as for project level.
.PP
\f[B]NOTE\f[] if you are upgrading a yaml 1.2 format document, you will
need to add a \f[C]context\f[] section.
.SS \f[C]for\f[]
.PP
The \f[C]for\f[] section declares a set of resource types, each
containing a sequence of matching rules which allow or deny certain
actions.
.PP
Resource types declare the type of a specific resource for the match,
and the generic "resource" is used to declare rules for all resources of
a certain type.
.PP
Inside \f[C]for\f[] is an entry for any of these resource types:
.IP \[bu] 2
\f[C]job\f[] \- a Rundeck Job
.IP \[bu] 2
\f[C]node\f[] \- a Node resource
.IP \[bu] 2
\f[C]adhoc\f[] \- an Ad\-hoc execution
.IP \[bu] 2
\f[C]project\f[] \- a Project
.IP \[bu] 2
\f[C]resource\f[] \- indicates rules for all resources of a certain kind
.PP
Within each type section is a sequence of rules.
Recall that in YAML, a sequence is defined using multiple \f[C]\-\f[]
indicators, or within \f[C][\f[] and \f[C]]\f[] and separated by commas.
.PP
Yaml sequences:
.IP
.nf
\f[C]
\ \ \ \ \-\ a
\ \ \ \ \-\ b
\f[]
.fi
.PP
also:
.IP
.nf
\f[C]
\ \ \ \ [\ a,\ b\ ]
\f[]
.fi
.SS Type rules
.PP
Type rules are in the form:
.IP
.nf
\f[C]
matching*:
\ property:\ value
allow:\ actions
deny:\ actions
\f[]
.fi
.PP
Each rule has one or more of these Action entries:
.IP \[bu] 2
\f[C]allow\f[] \- (List or String) \- the actions allowed
.IP \[bu] 2
\f[C]deny\f[] \- (List or String) \- the actions denied
.PP
It also has one or more of these "Matching" entries:
.IP \[bu] 2
\f[C]match\f[] \- (List or String) \- regular expression matches
.IP \[bu] 2
\f[C]equals\f[] \- (String) \- equality matches
.IP \[bu] 2
\f[C]contains\f[] \- (List or String) \- superset membership matches
.IP \[bu] 2
\f[C]subset\f[] \- (List or String) \- subset membership matches
.PP
Each Matching entry is composed of \f[C]property:\ value\f[], which
declare what property of the resource to test, and what value or values
to apply the matching rule to.
.PP
For example, to declare a rule for a resource with a "name" property of
"bob" exactly, use \f[C]equals\f[]:
.IP
.nf
\f[C]
\ \ \ \ equals:
\ \ \ \ \ \ name:\ bob
\ \ \ \ allow:\ [action1,\ action2]
\ \ \ \ deny:\ action3
\f[]
.fi
.PP
For regular expression matching, use \f[C]match\f[]:
.IP
.nf
\f[C]
\ \ \ \ match:
\ \ \ \ \ \ name:\ \[aq]bob|sam\[aq]
\f[]
.fi
.PP
For set membership matches, such as matching a Node that must have three
different tags, you can use \f[C]contains\f[]
.IP
.nf
\f[C]
\ \ \ \ contains:
\ \ \ \ \ \ tags:\ [a,b,c]
\f[]
.fi
.PP
The \f[C]match\f[] and \f[C]contains\f[] allow a list of property
values, and all of them must match the resource\[aq]s property for the
rule to match.
This allows the basic boolean AND logic.
For OR logic, you can simply declare another rule in the sequence since
all rules are checked (except in the case of an explicit deny).
.PP
The \f[C]subset\f[] match allows a list of property values, and will
fail if the resource has any values \f[I]not\f[] included in the subset.
.SS \f[C]by\f[]
.PP
Within \f[C]by\f[] are \f[C]username\f[] and \f[C]group\f[] entries that
declare who the policy applies to.
.PP
Each entry can contain a single string, or a sequence of strings to
define multiple entries.
.PP
Regular expressions are supported in the username or group.
.PP
A single match will result in further evaluation of the policy.
.PP
Examples:
.IP
.nf
\f[C]
\ \ \ \ by:
\ \ \ \ \ \ username:\ \[aq]bob\[aq]

\ \ \ \ by:\ #using\ a\ regular\ expression
\ \ \ \ \ \ username:\ \[aq]dev\\d+\[aq]

\ \ \ \ by:
\ \ \ \ \ \ group:\ [test,qa,prod]

\ \ \ \ by:\ #using\ a\ regular\ expression
\ \ \ \ \ \ group:\ \[aq]dev_team_(alpha|beta|gamma)\[aq]

\ \ \ \ by:
\ \ \ \ \ \ username:
\ \ \ \ \ \ \ \ \-\ simon
\ \ \ \ \ \ \ \ \-\ frank
\f[]
.fi
.SS \f[C]actions\f[] element
.PP
The actions element can be either a single value, or a list of values.
A single value takes the form:
.IP
.nf
\f[C]
actions:\ \[aq]an_action\[aq]
\f[]
.fi
.PP
And a list takes the form:
.IP
.nf
\f[C]
actions:\ [\[aq]an_action1\[aq],\[aq]an_action2\[aq]]
\f[]
.fi
.PP
Note that the single tick marks are optional according to the yaml
specification.
.PP
Possible values are limitless so it requires an understanding of the job
definition you\[aq]re trying to run.
The best way to understand what the actions are is to look at the
rundeck\-audit.log.
This will show all the options as they\[aq]re being evaluated.
.SS Example Admin policy
.PP
This document grants full permissions to an \[aq]admin\[aq] role:
.IP
.nf
\f[C]
description:\ Admin\ project\ level\ access\ control.\ Applies\ to\ resources\ within\ a\ specific\ project.
context:
\ \ project:\ \[aq].*\[aq]\ #\ all\ projects
for:
\ \ resource:
\ \ \ \ \-\ equals:
\ \ \ \ \ \ \ \ kind:\ job
\ \ \ \ \ \ allow:\ [create]\ #\ allow\ create\ jobs
\ \ \ \ \-\ equals:
\ \ \ \ \ \ \ \ kind:\ node
\ \ \ \ \ \ allow:\ [read,create,update,refresh]\ #\ allow\ refresh\ node\ sources
\ \ \ \ \-\ equals:
\ \ \ \ \ \ \ \ kind:\ event
\ \ \ \ \ \ allow:\ [read,create]\ #\ allow\ read/create\ events
\ \ adhoc:
\ \ \ \ \-\ allow:\ [read,run,runAs,kill,killAs]\ #\ allow\ running/killing\ adhoc\ jobs
\ \ job:
\ \ \ \ \-\ allow:\ [create,read,update,delete,run,runAs,kill,killAs]\ #\ allow\ create/read/write/delete/run/kill\ of\ all\ jobs
\ \ node:
\ \ \ \ \-\ allow:\ [read,run]\ #\ allow\ read/run\ for\ nodes
by:
\ \ group:\ admin

\-\-\-

description:\ Admin\ Application\ level\ access\ control,\ applies\ to\ creating/deleting\ projects,\ admin\ of\ user\ profiles,\ viewing\ projects\ and\ reading\ system\ information.
context:
\ \ application:\ \[aq]rundeck\[aq]
for:
\ \ resource:
\ \ \ \ \-\ equals:
\ \ \ \ \ \ \ \ kind:\ project
\ \ \ \ \ \ allow:\ [create]\ #\ allow\ create\ of\ projects
\ \ \ \ \-\ equals:
\ \ \ \ \ \ \ \ kind:\ system
\ \ \ \ \ \ allow:\ [read,enable_executions,disable_executions,admin]\ #\ allow\ read\ of\ system\ info,\ enable/disable\ all\ executions
\ \ \ \ \-\ equals:
\ \ \ \ \ \ \ \ kind:\ system_acl
\ \ \ \ \ \ allow:\ [read,create,update,delete,admin]\ #\ allow\ modifying\ system\ ACL\ files
\ \ \ \ \-\ equals:
\ \ \ \ \ \ \ \ kind:\ user
\ \ \ \ \ \ allow:\ [admin]\ #\ allow\ modify\ user\ profiles
\ \ project:
\ \ \ \ \-\ match:
\ \ \ \ \ \ \ \ name:\ \[aq].*\[aq]
\ \ \ \ \ \ allow:\ [read,import,export,configure,delete,admin]\ #\ allow\ full\ access\ of\ all\ projects\ or\ use\ \[aq]admin\[aq]
\ \ project_acl:
\ \ \ \ \-\ match:
\ \ \ \ \ \ \ \ name:\ \[aq].*\[aq]
\ \ \ \ \ \ allow:\ [read,create,update,delete,admin]\ #\ allow\ modifying\ project\-specific\ ACL\ files
\ \ storage:
\ \ \ \ \-\ allow:\ [read,create,update,delete]\ #\ allow\ access\ for\ /ssh\-key/*\ storage\ content

by:
\ \ group:\ admin
\f[]
.fi
.SH AUTHORS
Noah Campbell; Greg Schueler.
