.TH "JOB\-XML" "" "November 20, 2010" "" ""
.SH NAME
.PP
job\-v21 \- The \[aq]job\[aq] XML file declares job entries for Rundeck.
.PP
This is a demonstration document using all possible elements in the
current Rundeck "jobs" XML.
.SS Loading and unloading
.PP
This file can be batch loaded via
rd (https://rundeck.github.io/rundeck-cli/) jobs load command:
.IP
.nf
\f[C]
rd\ jobs\ load\ \-p\ project\ \-\-file\ /path/to/jobs.xml
\f[]
.fi
.PP
Rundeck job definitions can be dumped and saved to a file via rd jobs
list command:
.IP
.nf
\f[C]
rd\ jobs\ list\ \-p\ project\ \-\-file\ /tmp/jobs.xml
\f[]
.fi
.SH joblist
.PP
The root (aka "top\-level") element of the jobs XML file.
.PP
\f[I]Nested elements\f[]
.TP
.B job (#job)*
declares a single job
.RS
.RE
.PP
\f[I]Example\f[]
.IP
.nf
\f[C]
<joblist>
\ \ <job>
\ \ \ ...
\ \ </job>
\ \ <job>
\ \ \ ...
\ \ </job>
</joblist>
\f[]
.fi
.SS job
.PP
The job element is a sub\-element of joblist (#joblist) and defines a
job executable in Rundeck.
.PP
The following elements are used to describe the job.
Only one of each element is allowed.
.PP
\f[I]Nested elements\f[]
.TP
.B uuid (#uuid)
unique UUID to identify the job
.RS
.RE
.TP
.B name (#name-1)
the job name
.RS
.RE
.TP
.B description (#description)
the job description
.RS
.RE
.TP
.B group (#group)
group name
.RS
.RE
.TP
.B multipleExecutions (#multipleexecutions)
If the job can be executed multiple times simultaneously
.RS
.RE
.TP
.B context (#context)
command context
.RS
.RE
.TP
.B dispatch (#dispatch)
dispatch options
.RS
.RE
.TP
.B sequence (#sequence)
workflow sequence
.RS
.RE
.TP
.B notification (#notification)
notifications of execution success/failure, via email or webhook
.RS
.RE
.TP
.B nodefilters (#nodefilters)
node filtering expressions
.RS
.RE
.TP
.B loglevel (#loglevel)
the logging level
.RS
.RE
.TP
.B logging (#logging)
limit on the amount of log output
.RS
.RE
.PP
\f[I]Job command modes\f[]
.PP
Jobs execute a sequence of commands.
Commands come in several styles:
.IP \[bu] 2
System command
.IP \[bu] 2
A script
.IP \[bu] 2
A script file or URL
.IP \[bu] 2
Another defined job
.PP
\f[I]Examples\f[]
.PP
Execute the Unix \[aq]who\[aq] command
.IP
.nf
\f[C]
<joblist>
\ \ <job>
\ \ \ \ <name>who\[aq]s\ logged\ in?</name>
\ \ \ \ <description>Runs\ the\ unix\ who\ command</description>
\ \ \ \ <group>sysadm/users</group>
\ \ \ \ <context>
\ \ \ \ \ \ <project>default</project>
\ \ \ \ </context>
\ \ \ \ <sequence>
\ \ \ \ \ \ <command>
\ \ \ \ \ \ \ \ <!\-\-\ the\ Unix\ \[aq]who\[aq]\ command\ \-\->
\ \ \ \ \ \ \ \ <exec>who</exec>
\ \ \ \ \ \ </command>
\ \ \ \ \ </sequence>
\ \ \ \ <nodefilters\ excludeprecedence="true">
\ \ \ \ \ \ <include>
\ \ \ \ \ \ \ \ <os\-family>unix</os\-family>
\ \ \ \ \ \ </include>
\ \ \ \ </nodefilters>
\ \ \ \ <dispatch>
\ \ \ \ \ \ <threadcount>1</threadcount>
\ \ \ \ \ \ <keepgoing>true</keepgoing>
\ \ \ \ </dispatch>
\ \ </job>
</joblist>
\f[]
.fi
.PP
Execute a Bash script
.IP
.nf
\f[C]
<joblist>
\ \ <job>
\ \ \ \ <name>a\ simple\ script</name>
\ \ \ \ <description>Runs\ a\ trivial\ bash\ script</description>
\ \ \ \ <group>sysadm/users</group>
\ \ \ \ <context>
\ \ \ \ \ \ <project>default</project>
\ \ \ \ </context>
\ \ \ \ <sequence>
\ \ \ \ \ \ <command>
\ \ \ \ \ \ \ \ <script><![CDATA[#!/bin/bash
echo\ this\ is\ an\ example\ job\ running\ on\ $(hostname)
echo\ whatever
exit\ 0\ ]]></script>
\ \ \ \ \ \ </command>
\ \ \ \ \ </sequence>
\ \ \ \ <dispatch>
\ \ \ \ \ \ <threadcount>1</threadcount>
\ \ \ \ \ \ <keepgoing>true</keepgoing>
\ \ \ \ </dispatch>
\ \ </job>
</joblist>
\f[]
.fi
.PP
Execute a sequence of other commands, scripts and jobs:
.IP
.nf
\f[C]
<joblist>
\ \ <job>
\ \ \ \ <name>test\ coreutils</name>
\ \ \ \ <description/>
\ \ \ \ <context>
\ \ \ \ \ \ <project>default</project>
\ \ \ \ </context>
\ \ \ \ <sequence>\ \ \ \ \ \ \ \ \ 
\ \ \ \ \ <!\-\-\ the\ Unix\ \[aq]who\[aq]\ command\ \-\->
\ \ \ \ \ <command>
\ \ \ \ \ \ \ \ <exec>who</exec>
\ \ \ \ \ </command>
\ \ \ \ \ <!\-\-\ a\ Job\ named\ test/other\ tests\ \-\->
\ \ \ \ \ <command>
\ \ \ \ \ \ \ \ <jobref\ group="test"\ name="other\ tests"/>
\ \ \ \ \ </command>
\ \ \ \ </sequence>
\ \ \ \ <dispatch>
\ \ \ \ \ \ <threadcount>1</threadcount>
\ \ \ \ \ \ <keepgoing>false</keepgoing>
\ \ \ \ </dispatch>
\ \ </job>
</joblist>
\f[]
.fi
.SS uuid
.PP
The UUID is a sub\-element of job (#job).
This string can be set manually (if you are writing the job definition
from scratch), or will be assigned at job creation time by the Rundeck
server using a random UUID.
This string should be as unique as possible if you set it manually.
.PP
This identifier is used to uniquely identify jobs when ported between
Rundeck instances.
.SS name
.PP
The job name is a sub\-element of job (#job).
The combination of \[aq]name\[aq] and group (#group) and
project (#project) must be unique if the uuid (#uuid) identifier is not
included.
.SS description
.PP
The job description is a sub\-element of job (#job) and allows a short
description of the job.
.PP
If the description contains more than one line of text, then the first
line is used as the "short description" of the job, and rendered exactly
as text.
The remaining lines are the "extended description", rendered using
Markdown format as HTML in the Rundeck GUI.
Markdown can also embed HTML directly if you like.
See Wikipedia \-
Markdown (http://en.wikipedia.org/wiki/Markdown#Example).
.PP
The HTML is sanitized to remove disallowed tags before rendering to the
browser (such as \f[C]<script>\f[], etc.).
You can disable all extended description HTML rendering via a
configuration flag.
See GUI Customization (../administration/gui-customization.html).
.PP
\f[B]Note\f[]: To preserve formatting when defining the extended job
description in XML, you should be sure to use a CDATA section.
Wrap the contents in \f[C]<![CDATA[\f[] and \f[C]]]>\f[].
.PP
\f[I]Example Extended description\f[]
.IP
.nf
\f[C]
<job>
\ \ \ \ <name>My\ Job</name>
\ \ \ \ <description><![CDATA[Performs\ a\ service

This\ is\ <b>html</b>
<ul><li>bulleted\ list</li></ul>

<a\ href="/">Top</a>

1.\ this\ is\ a\ markdown\ numbered\ list
2.\ second\ item

[a\ link](http://example.com)

]]></description>
</job>
\f[]
.fi
.SS group
.PP
The group is a sub\-element of job (#job) and defines the job\[aq]s
group identifier.
This is a "/" (slash) separated string that mimics a directory
structure.
.PP
\f[I]Example\f[]
.IP
.nf
\f[C]
<job>
\ \ \ \ <name>who</name>
\ \ \ \ <description>who\ is\ logged\ in?</description>
\ \ \ \ <group>/sysadm/users</group>
</job>
\f[]
.fi
.SS multipleExecutions
.PP
Boolean value: \[aq]true/false\[aq].
If \[aq]true\[aq], then the job can be run multiple times at once.
Otherwise, the Job can only have a single execution at a time.
.IP
.nf
\f[C]
<job>
\ \ \ \ <name>who</name>
\ \ \ \ <description>who\ is\ logged\ in?</description>
\ \ \ \ <group>/sysadm/users</group>
\ \ \ \ <multipleExecutions>true</multipleExecutions>
</job>
\f[]
.fi
.SS timeout
.PP
Timeout string indicating the maximum allowed runtime for a job.
After this time expires, the job will be aborted.
.PP
The format is:
.IP \[bu] 2
\f[C]123\f[] a simple number, indicating seconds
.IP \[bu] 2
\f[C][number][unit]\f[] where "number" is a valid decimal number, and
"unit" is one of:
.RS 2
.IP \[bu] 2
\f[C]s\f[] \- seconds
.IP \[bu] 2
\f[C]m\f[] \- minutes
.IP \[bu] 2
\f[C]h\f[] \- hours
.IP \[bu] 2
\f[C]d\f[] \- days
.RE
.IP \[bu] 2
Any sequence of \f[C][number][unit]\f[] pairs.
The total time will be the added value of all the units.
Any other text in the string is ignored, so the pairs can be separated
by spaces or other descriptive text.
.PP
These are all valid values:
.IP \[bu] 2
\f[C]1d\ 6h\f[] \- 1 day and 6 hours
.IP \[bu] 2
\f[C]120m\f[] \- 120 minutes
.IP \[bu] 2
\f[C]${option.timeout}\f[] reference to a job option value
.IP
.nf
\f[C]
<job>
\ \ \ \ <name>who</name>
\ \ \ \ <description>who\ is\ logged\ in?</description>
\ \ \ \ <group>/sysadm/users</group>
\ \ \ \ <timeout>1d\ 6h</timeout>
</job>
\f[]
.fi
.SS retry
.PP
Retry count indicating the maximum number of times to retry the job if
it fails or times out.
.PP
Allowed values:
.IP \[bu] 2
An integer number, indicating maximum number of retries
.IP \[bu] 2
\f[C]${option.retry}\f[] reference to a job option value
.IP
.nf
\f[C]
<job>
\ \ \ \ <name>iffy\ job</name>
\ \ \ \ <description>Job\ which\ might\ need\ to\ be\ retried</description>
\ \ \ \ <retry>${option.retry}</retry>
</job>
\f[]
.fi
.SS logging
.PP
An optional logging limit, and the action to perform if the limit is
reached.
(See Jobs \- Log Limit (../manual/jobs.html#log-limit)).
.IP
.nf
\f[C]
<logging\ limit=\[aq]1KB\[aq]\ limitAction=\[aq]halt\[aq]\ status=\[aq]aborted\[aq]\ />
\f[]
.fi
.PP
If no \f[C]limitAction\f[] is set, it will default to a value of
\f[C]halt\f[] and a status of \f[C]failed\f[].
.PP
The syntax for \f[C]limit\f[] is:
.IP \[bu] 2
\f[C]###\f[] If you specify a number, that is treated as the "Maximum
total number of log lines"
.IP \[bu] 2
\f[C]###/node\f[] If you specify a number followed by \f[C]/node\f[],
the number is treated as the "Maximum number of log lines for a single
node"
.IP \[bu] 2
\f[C]###[GMK]B\f[] If you specify a number followed by a filesize
suffix, that is treated as the "total log file size".
The file size suffixes allowed are "GB" (gigabyte), "MB" (megabyte),
"KB" (kilobyte) and "B" (byte).
.PP
The allowed values for \f[C]limitAction\f[] are:
.IP \[bu] 2
\f[C]halt\f[] \- halt the job with an optional \f[C]status\f[]
.IP \[bu] 2
\f[C]truncate\f[] \- do not halt the job, and truncate all further
output
.PP
The allowed values for \f[C]status\f[] are any status string:
.IP \[bu] 2
\f[C]failed\f[] \- halt and fail the job
.IP \[bu] 2
\f[C]aborted\f[] \- halt and abort the job
.IP \[bu] 2
\f[C]<anything>\f[] \- a custom status string
.SS schedule
.PP
schedule is a sub\-element of job (#job) and specifies periodic job
execution using the stated schedule.
The schedule can be specified using embedded elements as shown below, or
using a single crontab (#crontab) attribute to set a full crontab
expression.
.PP
\f[I]Nested elements\f[]
.TP
.B time (#time)
the hour and minute and seconds
.RS
.RE
.TP
.B weekday (#weekday)
day(s) of week
.RS
.RE
.TP
.B month (#month)
month(s)
.RS
.RE
.TP
.B year (#year)
year
.RS
.RE
.PP
\f[I]Attributes\f[]
.TP
.B crontab (#crontab)
a full crontab expression
.RS
.RE
.PP
\f[I]Example\f[]
.PP
Run the job every morning at 6AM, 7AM and 8AM.
.IP
.nf
\f[C]
<schedule>
\ \ <time\ hour="06,07,08"\ minute="00"/>
\ \ <weekday\ day="*"/>
\ \ <month\ month="*"/>
</schedule>
\f[]
.fi
.PP
Run the job every morning at 6:00:02AM, 7:00:02AM and 8:00:02AM only in
the year 2010:
.IP
.nf
\f[C]
<schedule>
\ \ <time\ hour="06,07,08"\ minute="00"\ seconds="02"/>
\ \ <weekday\ day="*"/>
\ \ <month\ month="*"/>
\ \ <year\ year="2010"/>
</schedule>
\f[]
.fi
.PP
Run the job every morning at 6:00:02AM, 7:00:02AM and 8:00:02AM only in
the year 2010, using a single crontab attribute to express it:
.IP
.nf
\f[C]
<schedule\ crontab="02\ 00\ 06,07,08\ ?\ *\ *\ 2010"/>
\f[]
.fi
.PP
For more information, see
http://www.quartz\-scheduler.org/docs/tutorials/crontrigger.html or
http://www.stonebranch.com
.SS crontab
.PP
Attribute of the schedule (#schedule), sets the schedule with a full
crontab string.
For more information, see
http://www.quartz\-scheduler.org/docs/tutorials/crontrigger.html.
.PP
If specified, then the embedded schedule elements are not used.
.SS time
.PP
The schedule (#schedule) time to run the job
.PP
\f[I]Attributes\f[]
.TP
.B hour
values: 00\-23
.RS
.RE
.TP
.B minute
values: 00\-59
.RS
.RE
.SS weekday
.PP
The schedule (#schedule) weekday to run the job
.PP
\f[I]Attributes\f[]
.TP
.B day
values: \f[C]*\f[] \- all ; \f[C]1\-5\f[] days "sun\-sat" ;
\f[C]1,2,3\-5\f[] \- days "sun,mon,tue\-thu", etc
.RS
.RE
.SS month
.PP
The schedule (#schedule) month to run the job
.PP
\f[I]Attributes\f[]
.TP
.B month
values: * \- all 1\-10 \- month jan\-oct 1,2,3\-5 \- months
jan,feb,mar\-may, etc.
.RS
.RE
.TP
.B day
day of the month: * \- all; 1\-31 specific days
.RS
.RE
.SS year
.PP
The schedule (#schedule) year to run the job
.PP
\f[I]Attributes\f[]
.TP
.B year
year: * \- all; specific year
.RS
.RE
.SS context
.PP
The job (#job) context.
.PP
\f[I]Nested elements\f[]
.TP
.B options (#options)
job options.
specifies one or more option elements
.RS
.RE
.SS project
.PP
The context (#context) project name.
Ignored.
Project name must be specified at import time.
.SS options
.PP
The context (#context) options for user input.
.TP
.B preserveOrder
If set to "true", then the order of the option (#option) elements will
be preserved in the Rundeck GUI.
Otherwise the options will be shown in alphabetical order.
.RS
.RE
.PP
\f[I]Nested elements\f[]
.TP
.B option (#option)
an option element
.RS
.RE
.PP
\f[I]Example\f[]
.IP
.nf
\f[C]
<options>
\ \ \ \ <option\ name="detail"\ value="true"/>
</options>
\f[]
.fi
.SS option
.PP
Defines one option within the options (#options).
.PP
\f[I]Attributes\f[]
.TP
.B name
the option name
.RS
.RE
.TP
.B value
the default value
.RS
.RE
.TP
.B values
comma separated list of values
.RS
.RE
.TP
.B valuesUrl
URL to a list of JSON values
.RS
.RE
.TP
.B enforcedvalues
Boolean specifying that must pick from one of values
.RS
.RE
.TP
.B regex
Regex pattern of acceptable value
.RS
.RE
.TP
.B description
Description of the option, will be rendered as Markdown.
.RS
.RE
.TP
.B required
Boolean specifying that the option is required
.RS
.RE
.TP
.B multivalued
"true/false" \- whether the option supports multiple input values
.RS
.RE
.TP
.B delimiter
A string used to conjoin multiple input values.
(Required if \f[C]multivalued\f[] is "true")
.RS
.RE
.TP
.B multivalueAllSelected
"true/false" \- whether all values should be selected by default
.RS
.RE
.TP
.B secure
"true/false" \- whether the option is a secure input option.
Not compatible with "multivalued"
.RS
.RE
.TP
.B valueExposed
"true/false" \- whether a secure input option value is exposed to
scripts or not.
\f[C]false\f[] means the option will be used only as a Secure Remote
Authentication option.
default: \f[C]false\f[].
.RS
.RE
.TP
.B storagePath
for a secure option, a storage path to password value to use as default
.RS
.RE
.TP
.B isDate
"true/false" \- the option should display as a date/time input field
.RS
.RE
.TP
.B dateFormat
The date/time format to use in the UI.
Using the momentjs
format (http://momentjs.com/docs/#/displaying/format/).
.RS
.RE
.PP
\f[I]Example\f[]
.PP
Define defaults for the "port" option, requiring regex match.
.IP
.nf
\f[C]
<option\ name="port"\ value="80"\ values="80,8080,8888"\ regex="\\d+"/>
\f[]
.fi
.PP
Define defaults for the "port" option, enforcing the values list.
.IP
.nf
\f[C]
<option\ name="port"\ value="80"\ values="80,8080,8888"\ enforcedvalues="true"\ />
\f[]
.fi
.PP
Define defaults for the "ports" option, allowing multiple values
separated by ",".
.IP
.nf
\f[C]
<option\ name="port"\ value="80"\ values="80,8080,8888"\ enforcedvalues="true"\ 
\ \ \ \ \ \ \ \ multivalued="true"\ delimiter=","\ />
\f[]
.fi
.PP
Use a multi\-line description inside a CDATA section to preserve
whitespace.
Wrap the content in \f[C]<![CDATA[\f[] and \f[C]]]>\f[]:
.IP
.nf
\f[C]
<option\ name=\[aq]example\[aq]>
\ \ <description><![CDATA[example\ option\ description

*\ this\ content\ will\ be\ rendered
*\ as\ markdown]]></description>
</option>
\f[]
.fi
.SS valuesUrl JSON
.PP
The data returned from the valuesUrl can be formatted as a list of
values:
.IP
.nf
\f[C]
["x\ value","y\ value"]
\f[]
.fi
.PP
or as Name\-value list:
.IP
.nf
\f[C]
[
\ \ {name:"X\ Label",\ value:"x\ value"},
\ \ {name:"Y\ Label",\ value:"y\ value"},
\ \ {name:"A\ Label",\ value:"a\ value"}
]\ 
\f[]
.fi
.SS dispatch
.PP
The job (#job) dispatch options.
See the [Dispatcher options] for general information.
.PP
\f[I]Nested elements\f[]
.TP
.B threadcount (#threadcount)
dispatch up to threadcount
.RS
.RE
.TP
.B keepgoing (#keepgoing)
keep going flag
.RS
.RE
.TP
.B rankAttribute (#rankattribute)
Name of the Node attribute to use for ordering the sequence of nodes
(default is "nodename")
.RS
.RE
.TP
.B rankOrder (#rankorder)
Order direction for node ranking.
Either "ascending" or "descending" (default "ascending")
.RS
.RE
.PP
\f[I]Example\f[]
.IP
.nf
\f[C]
<dispatch>
\ \ <threadcount>1</threadcount>
\ \ <keepgoing>false</keepgoing>
\ \ <rankAttribute>nodename</rankAttribute>
\ \ <rankOrder>descending</rankOrder>
</dispatch>
\f[]
.fi
.SS threadcount
.PP
Defines the number of threads to execute within dispatch (#dispatch).
Must be a positive integer.
.SS keepgoing
.PP
Boolean describing if the dispatch (#dispatch) should continue of an
error occurs (true/false).
If true, continue if an error occurs.
.SS rankAttribute
.PP
This is the name of a Node attribute that determines the order in which
the Nodes are traversed.
The default value of "nodename" will rank the nodes based on their
names.
.PP
This can be any attribute of a Node, even attributes that do not exist
on some nodes.
For example you can set it to "rank", then any Nodes with a "rank"
attribute will be ordered before any other nodes, and they will be used
in the order of the rank attribute value.
.PP
The values in the rank attribute are compared first numerically if they
are valid integers, but otherwise they are compared alphanumerically.
Nodes which do not have the specified rank attribute will be ordered by
node name and treated as if they come after all nodes which do have the
rank attribute (if in ascending order).
.SS rankOrder
.PP
This determines whether the rank attribute should be used to order the
nodes in ascending or descending order.
.PP
Possible values: "ascending", or "descending".
The default if not specified is "ascending".
.SS loglevel
.PP
The job (#job) logging level.
The lower the more profuse the messages.
.IP \[bu] 2
DEBUG
.IP \[bu] 2
VERBOSE
.IP \[bu] 2
INFO
.IP \[bu] 2
WARN
.IP \[bu] 2
ERROR
.SS nodefilters
.PP
The job (#job) nodefilters options.
.PP
\f[I]Attributes\f[]
.TP
.B excludeprecedence
boolean value: true or false
.RS
.RE
.PP
\f[I]Nested elements\f[]
.TP
.B filter (#filter)
node filter string
.RS
.RE
.TP
.B include (#include)
include filter (deprecated)
.RS
.RE
.TP
.B exclude (#exclude)
exclude filter (deprecated)
.RS
.RE
.PP
\f[I]Example\f[]
.IP
.nf
\f[C]
<nodefilters\ excludeprecedence="true">
\ \ <filter>.*</filter>
</nodefilters>
\f[]
.fi
.SS filter
.PP
The filter string to select matching nodes.
.PP
The content of this element is the full node filter string.
See User Guide \- Node Filters (../manual/node-filters.html).
.SS include
.PP
See Include/exclude patterns (#includeexclude-patterns)
.SS exclude
.PP
See Include/exclude patterns (#includeexclude-patterns)
.SS Include/exclude patterns
.PP
The nodefilters (#nodefilters) include and exclude patterns.
.PP
\f[B]Note:\f[] These elements are deprecated and will be removed in a
later version of Rundeck.
Use the filter (#filter) string.
.PP
\f[I]Nested elements\f[]
.TP
.B hostname
node hostname
.RS
.RE
.TP
.B name
node resource name
.RS
.RE
.TP
.B type
node type
.RS
.RE
.TP
.B tags
node tags.
comma separated
.RS
.RE
.TP
.B os\-name
operating system name (eg, Linux, Mac OS X)
.RS
.RE
.TP
.B os\-family
operating system family (eg, unix, windows)
.RS
.RE
.TP
.B os\-arch
operating system architecture (eg i386,sparc)
.RS
.RE
.TP
.B os\-version
operating system version
.RS
.RE
.SS sequence
.PP
The job (#job) workflow sequence.
.PP
\f[I]Attributes\f[]
.TP
.B keepgoing
true/false.
(default false).
If true, the workflow sequence will continue even if there is a failure
.RS
.RE
.TP
.B strategy
node\-first/step\-first.
(default "node\-first").
The strategy to use for executing the workflow across nodes.
.RS
.RE
.PP
The strategy attribute determines the way that the workflow is executed.
"node\-first" means execute the full workflow on each node prior to the
next.
"step\-first" means execute each step across all nodes prior to the next
step.
.PP
\f[I]Nested elements\f[]
.TP
.B command (#command)
a sequence step
.RS
.RE
.SS command
.PP
Defines a step for a workflow sequence (#sequence).
.PP
The different types of sequence steps are defined in different ways.
.PP
See:
.IP \[bu] 2
Script sequence step (#script-sequence-step)
.IP \[bu] 2
Job sequence step (#job-sequence-step)
.IP \[bu] 2
Plugin step (#plugin-step)
.PP
A command can embed a errorhandler (#errorhandler) to define an action
to run if the step fails.
.PP
A command can have a description (#description) element to set the step
description.
.SS errorhandler
.PP
Defines an action to handle an error in a command (#command).
.PP
The contents of an \f[C]<errorhandler>\f[] are exactly the same as for a
command (#command) except it cannot contain any errorhandler itself.
.PP
The different types of errorhandler steps are defined in different ways.
.PP
\f[I]Attributes\f[]
.TP
.B \f[C]keepgoingOnSuccess\f[]
true/false.
(default false).
If true, and the error handler succeeds, the workflow sequence will
continue even if the workflow \f[C]keepgoing\f[] is false.
.RS
.RE
.PP
See:
.IP \[bu] 2
Script sequence step (#script-sequence-step)
.IP \[bu] 2
Job sequence step (#job-sequence-step)
.IP \[bu] 2
Plugin step (#plugin-step)
.PP
Example:
.IP
.nf
\f[C]
<errorhandler>
\ \ \ <exec>echo\ this\ is\ a\ shell\ command</exec>
</errorhandler>
\f[]
.fi
.PP
Inline script.
Note that using CDATA section will preserve linebreaks in the script.
Simply put the script within a script element:
.IP
.nf
\f[C]
<errorhandler>
\ \ \ \ <script><![CDATA[#!/bin/bash
echo\ this\ is\ a\ test
echo\ whatever
exit\ 2\ ]></script>
</errorhandler>
\f[]
.fi
.PP
Script File:
.IP
.nf
\f[C]
<errorhandler>
\ \ \ \ <scriptfile>/path/to/a/script</scriptfile>
\ \ \ \ <scriptargs>\-whatever\ something</scriptargs>
</errorhandler>\ \ \ \ \ \ 
\f[]
.fi
.PP
Example job reference:
.IP
.nf
\f[C]
<errorhandler\ >
\ \ \ \ <jobref\ group="My\ group"\ name="My\ Job">
\ \ \ \ \ \ \ <arg\ line="\-option\ value\ \-option2\ value2"/>
\ \ \ \ </jobref>
</errorhandler>\ \ \ \ \ \ 
\f[]
.fi
.SS description
.PP
Defines a description for a step.
.PP
Example:
.IP
.nf
\f[C]
<command>
\ \ \ <exec>echo\ this\ is\ a\ shell\ command</exec>
\ \ \ <description>Demonstrate\ echo\ command</description>
</command>
\f[]
.fi
.SS Script sequence step
.PP
Script steps can be defined in three ways within a command element:
.IP \[bu] 2
Simple shell command using exec element.
.IP \[bu] 2
Embedded script using script element.
.IP \[bu] 2
Script file using scriptfile and scriptargs elements.
.PP
Example exec step:
.IP
.nf
\f[C]
<command>
\ \ \ <exec>echo\ this\ is\ a\ shell\ command</exec>
</command>
\f[]
.fi
.PP
Inline script.
Note that using CDATA section will preserve linebreaks in the script.
Simply put the script within a script element:
.IP
.nf
\f[C]
<command>
\ \ \ \ <script><![CDATA[#!/bin/bash
echo\ this\ is\ a\ test
echo\ whatever
exit\ 2\ ]></script>
</command>
\f[]
.fi
.PP
Script File:
.IP
.nf
\f[C]
<command\ >
\ \ \ \ <scriptfile>/path/to/a/script</scriptfile>
\ \ \ \ <scriptargs>\-whatever\ something</scriptargs>
</command>\ \ \ \ \ \ 
\f[]
.fi
.PP
Script URL:
.IP
.nf
\f[C]
<command\ >
\ \ \ \ <scripturl>http://example.com/path/to/a/script</scripturl>
\ \ \ \ <scriptargs>\-whatever\ something</scriptargs>
</command>\ \ \ \ \ \ 
\f[]
.fi
.SS Script Interpreter
.PP
When using \f[C]<script>\f[], or \f[C]<scriptfile>\f[], you can declare
an interpreter to use to execute the script and its args.
.PP
Add \f[C]<scriptinterpreter>\f[] to the \f[C]<command>\f[]:
.IP
.nf
\f[C]
<command\ >
\ \ \ \ <scriptinterpreter>sudo\ \-u\ usera</scriptinterpreter>
\ \ \ \ <scripturl>http://example.com/path/to/a/script</scripturl>
\ \ \ \ <scriptargs>\-whatever\ something</scriptargs>
</command>
\f[]
.fi
.PP
This will be executed effectively with this commandline:
.IP
.nf
\f[C]
sudo\ \-u\ usera\ script.sh\ \-whatever\ something
\f[]
.fi
.PP
If the filename and arguments need to be quoted when passed to the
interpreter, you can declare \f[C]argsQuoted=\[aq]true\[aq]\f[]:
.IP
.nf
\f[C]
<command\ >
\ \ \ \ <scriptinterpreter\ argsquoted=\[aq]true\[aq]>sudo\ \-u\ usera\ sh\ \-c\ </scriptinterpreter>
\ \ \ \ <scripturl>http://example.com/path/to/a/script</scripturl>
\ \ \ \ <scriptargs>\-whatever\ something</scriptargs>
</command>
\f[]
.fi
.PP
This will execute as:
.IP
.nf
\f[C]
sudo\ \-u\ usera\ sh\ \-c\ \[aq]script.sh\ \-whatever\ something\[aq]
\f[]
.fi
.SS Job sequence step
.PP
Define a jobref (#jobref) element within the command (#command) element
.SS jobref
.PP
\f[I]Attributes\f[]
.TP
.B name
the job name
.RS
.RE
.TP
.B group
the group name
.RS
.RE
.TP
.B nodeStep
\f[C]true/false\f[] whether the Job reference step should run for each
node
.RS
.RE
.PP
\f[I]Nested elements\f[]
.PP
Optional "arg" element can be embedded:
.SS arg
.PP
: option arguments to the script or job
.PP
Example passing arguments to the job:
.IP
.nf
\f[C]
<command\ >
\ \ \ \ <jobref\ group="My\ group"\ name="My\ Job">
\ \ \ \ \ \ \ <arg\ line="\-option\ value\ \-option2\ value2"/>
\ \ \ \ </jobref>
</command>\ \ \ \ \ \ 
\f[]
.fi
.PP
If \f[C]nodeStep\f[] is set to "true", then the Job Reference step will
operate as a \f[I]Node Step\f[] instead of the default.
As a \f[I]Node Step\f[] it will execute once for each matched node in
the containing Job workflow, and can use node attribute variable
expansion in the arguments to the job reference.
.SS nodefilters (jobref)
.PP
The node filters to override for the jobref (#jobref).
.PP
\f[I]Nested elements\f[]
.TP
.B filter (#filter)
node filter string.
See User Guide \- Node Filters (../manual/node-filters.html).
.RS
.RE
.PP
Example:
.IP
.nf
\f[C]
<jobref\ group="My\ group"\ name="My\ Job">
\ \ <dispatch>
\ \ \ \ <threadcount>1</threadcount>
\ \ \ \ <keepgoing>false</keepgoing>
\ \ \ \ <rankAttribute>nodename</rankAttribute>
\ \ \ \ <rankOrder>descending</rankOrder>
\ \ </dispatch>
\ \ <nodefilters>
\ \ \ \ <filter>tags:\ production+appserver</filter>
\ \ </nodefilters>
</jobref>
\f[]
.fi
.SS dispatch (jobref)
.PP
The dispatch options to override for the jobref (#jobref).
.PP
The content is the same as for the job dispatch (#dispatch) section.
.SS Plugin step
.PP
There are two types of plugin steps that can be defined: Node steps, and
workflow steps.
.PP
Define either one within the command (#command) element:
.IP \[bu] 2
node\-step\-plugin (#node-step-plugin)
.IP \[bu] 2
step\-plugin (#step-plugin)
.PP
Both have the following contents:
.PP
\f[I]Attributes\f[]
.TP
.B type
The plugin provider type identifier
.RS
.RE
.PP
\f[I]Nested elements\f[]
.PP
Optional \[aq]configuration\[aq] can be embedded containing a list of
\[aq]entry\[aq] key/value pairs:
.TP
.B configuration (#configuration)
Defines plugin configuration entries
.RS
.RE
.TP
.B entry (#entry)
Defines a key/value pair for the configuration.
.RS
.RE
.PP
Example node step plugin definition:
.IP
.nf
\f[C]
<command>
\ \ \ \ <node\-step\-plugin\ type="my\-node\-step\-plugin">
\ \ \ \ \ \ \ <configuration>
\ \ \ \ \ \ \ \ <entry\ key="someconfig"\ value="a\ value"/>
\ \ \ \ \ \ \ \ <entry\ key="timout"\ value="2000"/>
\ \ \ \ \ \ \ </configuration>
\ \ \ \ </node\-step\-plugin>
</command>\ 
\f[]
.fi
.PP
Example workflow step plugin definition:
.IP
.nf
\f[C]
<command>
\ \ \ \ <step\-plugin\ type="my\-step\-plugin">
\ \ \ \ \ \ \ <configuration>
\ \ \ \ \ \ \ \ <entry\ key="repeat"\ value="12"/>
\ \ \ \ \ \ \ \ <entry\ key="debug"\ value="true"/>
\ \ \ \ \ \ \ </configuration>
\ \ \ \ </step\-plugin>
</command>\ \ \ \ \ 
\f[]
.fi
.SS node\-step\-plugin
.PP
Defines a plugin step that executes for each node.
.SS step\-plugin
.PP
Defines a plugin step that executes once in a workflow.
.SS configuration
.PP
Contains the key/value pair entries for plugin configuration, within a
node\-step\-plugin (#node-step-plugin) or step\-plugin (#step-plugin).
.SS entry
.PP
Defines a key/value pair within a configuration (#configuration).
.PP
\f[I]Attributes\f[]:
.TP
.B key
Key for the pair
.RS
.RE
.TP
.B value
Textual value
.RS
.RE
.SS notification
.PP
Defines email, webhook or plugin notifications for Job success and
failure, with in a job (#job) definition.
.PP
\f[I]Nested elements\f[]
.TP
.B onsuccess (#onsuccess)
define notifications for success result
.RS
.RE
.TP
.B onfailure (#onfailure)
define notifications for failure/kill result
.RS
.RE
.TP
.B onstart (#onstart)
define notifications for job start
.RS
.RE
.PP
\f[I]Example\f[]
.IP
.nf
\f[C]
<notification>
\ \ \ \ <onfailure>
\ \ \ \ \ \ \ \ <email\ recipients="test\@example.com,foo\@example.com"\ />
\ \ \ \ </onfailure>
\ \ \ \ <onsuccess>
\ \ \ \ \ \ \ \ <email\ recipients="test\@example.com"\ />
\ \ \ \ \ \ \ \ <webhook\ urls="http://example.com?id=${execution.id}"\ />
\ \ \ </onsuccess>
\ \ \ \ <onstart>
\ \ \ \ \ \ \ \ <plugin\ type="MyPlugin">
\ \ \ \ \ \ \ \ \ \ <configuration>
\ \ \ \ \ \ \ \ \ \ \ \ <entry\ key="customkey"\ value="customvalue"/>
\ \ \ \ \ \ \ \ \ \ </configuration>
\ \ \ \ \ \ \ \ </plugin>
\ \ \ </onstart>
</notification>\ \ \ \ \ \ 
\f[]
.fi
.SS onsuccess
.PP
Embed an email (#email) element to send email on success, within
notification (#notification).
.PP
Embed an webhook (#webhook) element to perform a HTTP POST to some URLs,
within notification (#notification).
.PP
Embed an plugin (#plugin) element to perform a custom action, within
notification (#notification).
.SS onfailure
.PP
Embed an email (#email) element to send email on failure or kill, within
notification (#notification).
.PP
Embed an webhook (#webhook) element to perform a HTTP POST to some URLs,
within notification (#notification).
.PP
Embed an plugin (#plugin) element to perform a custom action, within
notification (#notification).
.SS onstart
.PP
Embed an email (#email) element to send email on failure or kill, within
notification (#notification).
.PP
Embed an webhook (#webhook) element to perform a HTTP POST to some URLs,
within notification (#notification).
.PP
Embed an plugin (#plugin) element to perform a custom action, within
notification (#notification).
.SS email
.PP
Define email recipients for Job execution result, within
onsuccess (#onsuccess), onfailure (#onfailure) or onstart (#onstart).
.PP
\f[I]Attributes\f[]
.TP
.B recipients
comma\-separated list of email addresses
.RS
.RE
.PP
\f[I]Example\f[]
.IP
.nf
\f[C]
\ \ \ \ \ \ \ \ <email\ recipients="test\@example.com,dev\@example.com"\ />
\f[]
.fi
.SS webhook
.PP
Define URLs to submit a HTTP POST to containing the job execution
result, within onsuccess (#onsuccess), onfailure (#onfailure) or
onstart (#onstart).
.PP
\f[I]Attributes\f[]
.TP
.B urls
comma\-separated list of URLs
.RS
.RE
.PP
\f[I]Example\f[]
.IP
.nf
\f[C]
<webhook\ urls="http://server/callback?id=${execution.id}&status=${execution.status}&trigger=${notification.trigger}"/>
\f[]
.fi
.IP \[bu] 2
For more information about the Webhook mechanism used, see the chapter
Integration \- Webhooks (../manual/jobs.html#webhooks).
.SS plugin
.PP
Defines a configuration for a plugin to perform a Notification, within
onsuccess (#onsuccess), onfailure (#onfailure) or onstart (#onstart).
.PP
\f[I]Attributes\f[]
.TP
.B type
The plugin provider type identifier
.RS
.RE
.PP
\f[I]Nested elements\f[]
.PP
Optional \[aq]configuration\[aq] can be embedded containing a list of
\[aq]entry\[aq] key/value pairs:
.TP
.B configuration (#configuration-1)
Defines plugin configuration entries
.RS
.RE
.TP
.B entry (#entry-1)
Defines a key/value pair for the configuration.
.RS
.RE
.PP
Example notification plugin definition:
.IP
.nf
\f[C]
<onstart>
\ \ \ \ <plugin\ type="my\-notification\-plugin">
\ \ \ \ \ \ \ <configuration>
\ \ \ \ \ \ \ \ <entry\ key="someconfig"\ value="a\ value"/>
\ \ \ \ \ \ \ \ <entry\ key="timout"\ value="2000"/>
\ \ \ \ \ \ \ </configuration>
\ \ \ \ </plugin>
</onstart>\ 
\f[]
.fi
.SS configuration
.PP
Contains the key/value pair entries for plugin configuration, within a
plugin (#plugin) notification definition.
.SS entry
.PP
Defines a key/value pair within a configuration (#configuration-1).
.PP
\f[I]Attributes\f[]:
.TP
.B key
Key for the pair
.RS
.RE
.TP
.B value
Textual value
.RS
.RE
.SH SEE ALSO
.PP
\f[C][rd\-jobs](../man1/rd\-jobs.html)\f[]
.PP
The Rundeck source code and all documentation may be downloaded from
<https://github.com/rundeck/rundeck/>.
.SH AUTHORS
Alex Honor.
